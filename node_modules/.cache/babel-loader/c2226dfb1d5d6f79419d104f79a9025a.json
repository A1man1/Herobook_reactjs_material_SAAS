{"ast":null,"code":"var _jsxFileName = \"/home/aman/project/front end react/React-js-machine-learning-master/frontend/interface/src/logged_out/components/MultiBlog/MultiBlog.js\";\nimport React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { Grid, Box, isWidthUp, withWidth, withStyles } from \"@material-ui/core\";\nimport BlogCard from \"./BlogCard\";\n\nconst styles = theme => ({\n  blogContentWrapper: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(4),\n      marginRight: theme.spacing(4)\n    },\n    maxWidth: 1280,\n    width: \"100%\"\n  },\n  wrapper: {\n    minHeight: \"60vh\"\n  },\n  noDecoration: {\n    textDecoration: \"none !important\"\n  }\n});\n\nfunction getVerticalBlogPosts(width, blogPosts) {\n  const gridRows = [[], [], []];\n  let rows;\n  let xs;\n\n  if (isWidthUp(\"md\", width)) {\n    rows = 3;\n    xs = 4;\n  } else if (isWidthUp(\"sm\", width)) {\n    rows = 2;\n    xs = 6;\n  } else {\n    rows = 1;\n    xs = 12;\n  }\n\n  blogPosts.forEach((blogPost, index) => {\n    gridRows[index % rows].push( /*#__PURE__*/React.createElement(Grid, {\n      key: blogPost.id,\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      mb: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(BlogCard, {\n      src: blogPost.imageSrc,\n      title: blogPost.title,\n      topic: blogPosts.topic,\n      snippet: blogPost.snippet,\n      date: blogPost.date,\n      url: blogPost.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    }))));\n  });\n  return gridRows.map((element, index) => /*#__PURE__*/React.createElement(Grid, {\n    key: index,\n    item: true,\n    xs: xs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, element));\n}\n\nfunction MultiBlog(props) {\n  const {\n    classes,\n    width,\n    blogPosts,\n    selectBlog\n  } = props;\n  useEffect(() => {\n    selectBlog();\n  }, [selectBlog]);\n  return /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    className: classNames(classes.wrapper, \"lg-p-top\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.blogContentWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, getVerticalBlogPosts(width, blogPosts))));\n}\n\nMultiBlog.propTypes = {\n  selectBlog: PropTypes.func.isRequired,\n  classes: PropTypes.object.isRequired,\n  width: PropTypes.string.isRequired,\n  blogposts: PropTypes.arrayOf(PropTypes.object)\n};\nexport default withWidth()(withStyles(styles, {\n  withTheme: true\n})(MultiBlog));","map":{"version":3,"sources":["/home/aman/project/front end react/React-js-machine-learning-master/frontend/interface/src/logged_out/components/MultiBlog/MultiBlog.js"],"names":["React","useEffect","PropTypes","classNames","Grid","Box","isWidthUp","withWidth","withStyles","BlogCard","styles","theme","blogContentWrapper","marginLeft","spacing","marginRight","breakpoints","up","maxWidth","width","wrapper","minHeight","noDecoration","textDecoration","getVerticalBlogPosts","blogPosts","gridRows","rows","xs","forEach","blogPost","index","push","id","imageSrc","title","topic","snippet","date","url","map","element","MultiBlog","props","classes","selectBlog","propTypes","func","isRequired","object","string","blogposts","arrayOf","withTheme"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { Grid, Box, isWidthUp, withWidth, withStyles } from \"@material-ui/core\";\nimport BlogCard from \"./BlogCard\";\n\n\nconst styles = theme => ({\n  blogContentWrapper: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(4),\n      marginRight: theme.spacing(4)\n    },\n    maxWidth: 1280,\n    width: \"100%\"\n  },\n  wrapper: {\n    minHeight: \"60vh\"\n  },\n  noDecoration: {\n    textDecoration: \"none !important\"\n  }\n});\n\nfunction getVerticalBlogPosts(width, blogPosts) {\n  const gridRows = [[], [], []];\n  let rows;\n  let xs;\n  if (isWidthUp(\"md\", width)) {\n    rows = 3;\n    xs = 4;\n  } else if (isWidthUp(\"sm\", width)) {\n    rows = 2;\n    xs = 6;\n  } else {\n    rows = 1;\n    xs = 12;\n  }\n  blogPosts.forEach((blogPost, index) => {\n    gridRows[index % rows].push(\n      <Grid key={blogPost.id} item xs={12}>\n        <Box mb={3}>\n          <BlogCard\n            src={blogPost.imageSrc}\n            title={blogPost.title}\n            topic={blogPosts.topic}\n            snippet={blogPost.snippet}\n            date={blogPost.date}\n            url={blogPost.url}\n\n          />\n        </Box>\n      </Grid>\n    );\n  });\n  return gridRows.map((element, index) => (\n    <Grid key={index} item xs={xs}>\n      {element}\n    </Grid>\n  ));\n}\n\nfunction MultiBlog(props) {\n    const { classes, width, blogPosts, selectBlog } = props;\n  useEffect(() => {\n    selectBlog();\n  }, [selectBlog]);\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      className={classNames(classes.wrapper, \"lg-p-top\")}\n    >\n      <div className={classes.blogContentWrapper}>\n        <Grid container spacing={3}>\n          {getVerticalBlogPosts(width, blogPosts)}\n        </Grid>\n      </div>\n    </Box>\n      \n  );\n}\n\nMultiBlog.propTypes = {\n  selectBlog: PropTypes.func.isRequired,\n  classes: PropTypes.object.isRequired,\n  width: PropTypes.string.isRequired,\n  blogposts: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport default withWidth()(withStyles(styles, { withTheme: true })(MultiBlog));\n"]},"metadata":{},"sourceType":"module"}
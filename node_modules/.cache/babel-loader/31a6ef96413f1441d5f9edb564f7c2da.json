{"ast":null,"code":"import _slicedToArray from\"/home/aman/project/front end react/React-js-machine-learning-master/frontend/interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useCallback}from\"react\";import{Dialog,DialogContent,DialogActions,Button,Box,withStyles}from\"@material-ui/core\";var styles=function styles(theme){return{dialogPaper:{maxWidth:\"\".concat(theme.breakpoints.values.md,\"px !important\")},dialogContent:{paddingTop:theme.spacing(2),paddingRight:theme.spacing(2),paddingLeft:theme.spacing(2)}};};function ImageCropperDialog(props){var ImageCropper=props.ImageCropper,classes=props.classes,onClose=props.onClose,open=props.open,src=props.src,onCrop=props.onCrop,aspectRatio=props.aspectRatio;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),crop=_useState2[0],setCrop=_useState2[1];var getCropFunctionFromChild=useCallback(function(cropFunction){setCrop(function(){return cropFunction;});},[setCrop]);return/*#__PURE__*/React.createElement(Dialog,{open:open,onEscapeKeyDown:onClose,classes:{paper:classes.dialogPaper},style:{overflowX:\"visible\"}},/*#__PURE__*/React.createElement(DialogContent,{className:classes.dialogContent},/*#__PURE__*/React.createElement(ImageCropper,{src:src,setCropFunction:getCropFunctionFromChild,onCrop:onCrop,aspectRatio:aspectRatio,color:\"#3399FF\"})),/*#__PURE__*/React.createElement(DialogActions,null,/*#__PURE__*/React.createElement(Box,{mr:1},/*#__PURE__*/React.createElement(Button,{onClick:onClose},\"Close\")),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"secondary\",onClick:crop},\"Crop\")));}export default withStyles(styles,{withTheme:true})(ImageCropperDialog);","map":{"version":3,"sources":["/home/aman/project/front end react/React-js-machine-learning-master/frontend/interface/src/shared/components/ImageCropperDialog.js"],"names":["React","useState","useCallback","Dialog","DialogContent","DialogActions","Button","Box","withStyles","styles","theme","dialogPaper","maxWidth","breakpoints","values","md","dialogContent","paddingTop","spacing","paddingRight","paddingLeft","ImageCropperDialog","props","ImageCropper","classes","onClose","open","src","onCrop","aspectRatio","crop","setCrop","getCropFunctionFromChild","cropFunction","paper","overflowX","withTheme"],"mappings":"6MAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,WAA1B,KAA6C,OAA7C,CAEA,OACEC,MADF,CAEEC,aAFF,CAGEC,aAHF,CAIEC,MAJF,CAKEC,GALF,CAMEC,UANF,KAOO,mBAPP,CASA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBC,WAAW,CAAE,CAAEC,QAAQ,WAAKF,KAAK,CAACG,WAAN,CAAkBC,MAAlB,CAAyBC,EAA9B,iBAAV,CADU,CAEvBC,aAAa,CAAE,CACbC,UAAU,CAAEP,KAAK,CAACQ,OAAN,CAAc,CAAd,CADC,CAEbC,YAAY,CAAET,KAAK,CAACQ,OAAN,CAAc,CAAd,CAFD,CAGbE,WAAW,CAAEV,KAAK,CAACQ,OAAN,CAAc,CAAd,CAHA,CAFQ,CAAL,EAApB,CASA,QAASG,CAAAA,kBAAT,CAA4BC,KAA5B,CAAmC,IAE/BC,CAAAA,YAF+B,CAS7BD,KAT6B,CAE/BC,YAF+B,CAG/BC,OAH+B,CAS7BF,KAT6B,CAG/BE,OAH+B,CAI/BC,OAJ+B,CAS7BH,KAT6B,CAI/BG,OAJ+B,CAK/BC,IAL+B,CAS7BJ,KAT6B,CAK/BI,IAL+B,CAM/BC,GAN+B,CAS7BL,KAT6B,CAM/BK,GAN+B,CAO/BC,MAP+B,CAS7BN,KAT6B,CAO/BM,MAP+B,CAQ/BC,WAR+B,CAS7BP,KAT6B,CAQ/BO,WAR+B,eAUT5B,QAAQ,CAAC,IAAD,CAVC,wCAU1B6B,IAV0B,eAUpBC,OAVoB,eAYjC,GAAMC,CAAAA,wBAAwB,CAAG9B,WAAW,CAAC,SAAA+B,YAAY,CAAI,CAC3DF,OAAO,CAAC,iBAAME,CAAAA,YAAN,EAAD,CAAP,CACD,CAF2C,CAEzC,CAACF,OAAD,CAFyC,CAA5C,CAIA,mBACE,oBAAC,MAAD,EACE,IAAI,CAAEL,IADR,CAEE,eAAe,CAAED,OAFnB,CAGE,OAAO,CAAE,CAAES,KAAK,CAAEV,OAAO,CAACb,WAAjB,CAHX,CAIE,KAAK,CAAE,CAAEwB,SAAS,CAAE,SAAb,CAJT,eAME,oBAAC,aAAD,EAAe,SAAS,CAAEX,OAAO,CAACR,aAAlC,eACE,oBAAC,YAAD,EACE,GAAG,CAAEW,GADP,CAEE,eAAe,CAAEK,wBAFnB,CAGE,MAAM,CAAEJ,MAHV,CAIE,WAAW,CAAEC,WAJf,CAKE,KAAK,CAAC,SALR,EADF,CANF,cAeE,oBAAC,aAAD,mBACE,oBAAC,GAAD,EAAK,EAAE,CAAE,CAAT,eACE,oBAAC,MAAD,EAAQ,OAAO,CAAEJ,OAAjB,UADF,CADF,cAIE,oBAAC,MAAD,EAAQ,OAAO,CAAC,WAAhB,CAA4B,KAAK,CAAC,WAAlC,CAA8C,OAAO,CAAEK,IAAvD,SAJF,CAfF,CADF,CA2BD,CAYD,cAAetB,CAAAA,UAAU,CAACC,MAAD,CAAS,CAAE2B,SAAS,CAAE,IAAb,CAAT,CAAV,CAAwCf,kBAAxC,CAAf","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogActions,\n  Button,\n  Box,\n  withStyles\n} from \"@material-ui/core\";\n\nconst styles = theme => ({\n  dialogPaper: { maxWidth: `${theme.breakpoints.values.md}px !important` },\n  dialogContent: {\n    paddingTop: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    paddingLeft: theme.spacing(2)\n  }\n});\n\nfunction ImageCropperDialog(props) {\n  const {\n    ImageCropper,\n    classes,\n    onClose,\n    open,\n    src,\n    onCrop,\n    aspectRatio\n  } = props;\n  const [crop, setCrop] = useState(null);\n\n  const getCropFunctionFromChild = useCallback(cropFunction => {\n    setCrop(() => cropFunction);\n  }, [setCrop]);\n\n  return (\n    <Dialog\n      open={open}\n      onEscapeKeyDown={onClose}\n      classes={{ paper: classes.dialogPaper }}\n      style={{ overflowX: \"visible\" }}\n    >\n      <DialogContent className={classes.dialogContent}>\n        <ImageCropper\n          src={src}\n          setCropFunction={getCropFunctionFromChild}\n          onCrop={onCrop}\n          aspectRatio={aspectRatio}\n          color=\"#3399FF\"\n        />\n      </DialogContent>\n      <DialogActions>\n        <Box mr={1}>\n          <Button onClick={onClose}>Close</Button>\n        </Box>\n        <Button variant=\"contained\" color=\"secondary\" onClick={crop}>\n          Crop\n          </Button>\n      </DialogActions>\n    </Dialog>\n  );\n\n}\n\nImageCropperDialog.propTypes = {\n  ImageCropper: PropTypes.elementType,\n  classes: PropTypes.object.isRequired,\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  onCrop: PropTypes.func.isRequired,\n  src: PropTypes.string,\n  aspectRatio: PropTypes.number\n};\n\nexport default withStyles(styles, { withTheme: true })(ImageCropperDialog);\n"]},"metadata":{},"sourceType":"module"}